name: Build and Release

on:
  push:
    tags:
      - 'v*' # Trigger on version tags like v1.0.0
  workflow_dispatch: # Allow manual trigger
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: false
        default: 'v1.0.0'

permissions:
  contents: write
  actions: read
  checks: write

jobs:
  build:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    
    strategy:
      matrix:
        os: [windows-latest, macos-latest]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
        cache-dependency-path: 'requirements.txt'
        
    - name: Install Python dependencies
      id: python-deps
      run: |
        python -m pip install --upgrade pip --no-input --timeout 300
        pip install -r requirements.txt --no-input --timeout 300 --no-warn-script-location --disable-pip-version-check
      continue-on-error: true
      
    - name: Python dependency status (Windows)
      if: matrix.os == 'windows-latest'
      shell: pwsh
      run: |
        if ("${{ steps.python-deps.outcome }}" -eq "failure") {
          Write-Host "⚠️ Python dependencies failed to install, but continuing with Electron build..."
        } else {
          Write-Host "✅ Python dependencies installed successfully"
        }
        
    - name: Python dependency status (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        if [ "${{ steps.python-deps.outcome }}" = "failure" ]; then
          echo "⚠️ Python dependencies failed to install, but continuing with Electron build..."
        else
          echo "✅ Python dependencies installed successfully"
        fi
        
    - name: Install Node.js dependencies
      run: npm ci
      
    - name: Verify icon files
      run: npm run verify-icons
      
    - name: Build React app
      run: npm run build
      
    - name: Build Electron app (Windows)
      if: matrix.os == 'windows-latest'
      run: npm run make:win
      
    - name: Build Electron app (macOS)
      if: matrix.os == 'macos-latest'
      run: npm run make
      continue-on-error: true
      id: macos-build
      
    - name: Build Electron app (macOS) - Fallback without DMG
      if: matrix.os == 'macos-latest' && steps.macos-build.outcome == 'failure'
      run: |
        echo "Regular macOS build failed, trying without DMG maker..."
        npx electron-forge make --config=forge.config.no-dmg.js
      
    # Debug build outputs
    - name: Debug Windows build output
      if: matrix.os == 'windows-latest'
      shell: pwsh
      run: |
        Write-Host "=== Windows build output structure ==="
        if (Test-Path "out") {
          Get-ChildItem -Path "out" -Recurse -Include "*.exe", "*.zip", "*.nupkg" | Select-Object FullName | Sort-Object FullName
          Write-Host ""
          Write-Host "=== out directory ==="
          Get-ChildItem -Path "out" -Force
          Write-Host ""
          if (Test-Path "out/make") {
            Write-Host "=== make directory ==="
            Get-ChildItem -Path "out/make" -Force -Recurse
          } else {
            Write-Host "No make directory"
          }
        } else {
          Write-Host "No out directory found"
        }
        
    - name: Debug macOS build output
      if: matrix.os == 'macos-latest'
      run: |
        echo "=== macOS build output structure ==="
        find out -type f -name "*.zip" -o -name "*.dmg" -o -name "*.app" | sort || echo "No macOS build outputs found"
        ls -la out/ || echo "No out directory"
        ls -la out/make/ || echo "No make directory"
        ls -la out/make/zip/ || echo "No zip directory"
        ls -la out/make/zip/darwin/ || echo "No darwin directory"
      
    # Upload Windows artifacts
    - name: Upload Windows artifacts
      if: matrix.os == 'windows-latest'
      uses: actions/upload-artifact@v4
      with:
        name: FowCrawler-Windows
        path: |
          out/make/squirrel.windows/x64/*.exe
          out/make/squirrel.windows/x64/*.nupkg
          out/make/zip/win32/x64/*.zip
        retention-days: 30
        
    # Upload macOS artifacts with more flexible paths
    - name: Upload macOS artifacts
      if: matrix.os == 'macos-latest'
      uses: actions/upload-artifact@v4
      with:
        name: FowCrawler-macOS
        path: |
          out/make/zip/darwin/**/*.zip
          out/make/*.dmg
          out/make/**/*.zip
        retention-days: 30

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v') || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
        
    - name: Display structure of downloaded files
      run: |
        echo "=== Artifacts directory structure ==="
        find artifacts -type f -name "*.exe" -o -name "*.zip" -o -name "*.nupkg" -o -name "*.dmg" 2>/dev/null | sort || echo "No build artifacts found"
        echo ""
        echo "=== Detailed file listing ==="
        ls -la artifacts/ 2>/dev/null || echo "No artifacts directory"
        echo ""
        for dir in artifacts/*/; do
          if [ -d "$dir" ]; then
            echo "=== Contents of $dir ==="
            ls -la "$dir" 2>/dev/null || echo "Directory empty or inaccessible"
            echo ""
          fi
        done
        
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.event.inputs.version || github.ref_name }}
        release_name: FowCrawler ${{ github.event.inputs.version || github.ref_name }}
        body: |
          ## FowCrawler Release ${{ github.event.inputs.version || github.ref_name }}
          
          ### Downloads
          - **Windows**: Download `FowCrawler-Setup.exe` for easy installation
          - **macOS**: Download the `.zip` file and extract
          
          ### Features
          - League of Legends player ranking search
          - Filter by winrate and rank range
          - Export results to CSV
          - Real-time progress tracking
          - Automatic Python API integration
          
          ### System Requirements
          - **Windows**: Windows 10 or later
          - **macOS**: macOS 10.15 or later
          - **Python**: 3.8+ (included in Windows build)
          
          ### Installation
          - **Windows**: Run the installer and follow the setup wizard
          - **macOS**: Extract and run the executable
          
          For detailed instructions, see [BUILD_WINDOWS.md](https://github.com/${{ github.repository }}/blob/main/BUILD_WINDOWS.md)
        draft: false
        prerelease: false
        
    # Find and upload Windows files
    - name: Find Windows files
      id: find-windows
      run: |
        echo "Looking for Windows files..."
        SETUP_EXE=$(find artifacts/FowCrawler-Windows -name "*Setup*.exe" -o -name "*setup*.exe" -o -name "*.exe" | head -1)
        WIN_ZIP=$(find artifacts/FowCrawler-Windows -name "*.zip" | head -1)
        
        echo "setup_exe=${SETUP_EXE}" >> $GITHUB_OUTPUT
        echo "win_zip=${WIN_ZIP}" >> $GITHUB_OUTPUT
        
        echo "Found setup exe: ${SETUP_EXE}"
        echo "Found win zip: ${WIN_ZIP}"
        
    - name: Find macOS files
      id: find-macos
      run: |
        echo "Looking for macOS files..."
        
        # Search for ZIP files in various possible locations
        MACOS_ZIP=$(find artifacts/FowCrawler-macOS -name "*.zip" 2>/dev/null | head -1)
        if [ -z "$MACOS_ZIP" ]; then
          echo "No ZIP found in FowCrawler-macOS, searching more broadly..."
          MACOS_ZIP=$(find artifacts -name "*darwin*.zip" -o -name "*macOS*.zip" -o -name "*mac*.zip" 2>/dev/null | head -1)
        fi
        
        # Search for DMG files
        MACOS_DMG=$(find artifacts/FowCrawler-macOS -name "*.dmg" 2>/dev/null | head -1)
        if [ -z "$MACOS_DMG" ]; then
          echo "No DMG found in FowCrawler-macOS, searching more broadly..."
          MACOS_DMG=$(find artifacts -name "*.dmg" 2>/dev/null | head -1)
        fi
        
        echo "macos_zip=${MACOS_ZIP}" >> $GITHUB_OUTPUT
        echo "macos_dmg=${MACOS_DMG}" >> $GITHUB_OUTPUT
        
        echo "Found macOS zip: ${MACOS_ZIP}"
        echo "Found macOS dmg: ${MACOS_DMG}"
        
        # If no files found, show what we do have
        if [ -z "$MACOS_ZIP" ] && [ -z "$MACOS_DMG" ]; then
          echo "⚠️ No macOS files found! Available files:"
          find artifacts -type f 2>/dev/null || echo "No artifacts found at all"
        fi
        
    # Upload Windows files
    - name: Upload Windows Installer
      if: steps.find-windows.outputs.setup_exe != ''
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ steps.find-windows.outputs.setup_exe }}
        asset_name: FowCrawler-Setup.exe
        asset_content_type: application/octet-stream
        
    - name: Upload Windows ZIP
      if: steps.find-windows.outputs.win_zip != ''
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ steps.find-windows.outputs.win_zip }}
        asset_name: FowCrawler-Windows.zip
        asset_content_type: application/zip
        
    # Upload macOS files
    - name: Upload macOS ZIP
      if: steps.find-macos.outputs.macos_zip != ''
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ steps.find-macos.outputs.macos_zip }}
        asset_name: FowCrawler-macOS.zip
        asset_content_type: application/zip
        
    - name: Upload macOS DMG
      if: steps.find-macos.outputs.macos_dmg != ''
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ steps.find-macos.outputs.macos_dmg }}
        asset_name: FowCrawler-macOS.dmg
        asset_content_type: application/octet-stream 
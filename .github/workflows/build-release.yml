name: Build and Release

on:
  push:
    tags:
      - 'v*' # Trigger on version tags like v1.0.0
  workflow_dispatch: # Allow manual trigger
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: false
        default: 'v1.0.0'

permissions:
  contents: write
  actions: read
  checks: write
  pull-requests: write

jobs:
  build:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    
    strategy:
      matrix:
        os: [windows-latest, macos-latest]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Get version from package.json
      id: package-version
      run: |
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          VERSION=$(cat package.json | grep '"version"' | cut -d'"' -f4)
        else
          VERSION=$(node -p "require('./package.json').version")
        fi
        echo "version=v${VERSION}" >> $GITHUB_OUTPUT
        echo "Version: v${VERSION}"
      shell: bash
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
        cache-dependency-path: 'requirements.txt'
        
    - name: Install Python dependencies
      run: pip install -r requirements.txt
      
    - name: Install Node.js dependencies
      run: npm ci
      
    - name: Verify icon files
      run: npm run verify-icons
      
    - name: Build React app
      run: npm run build
      
    - name: Build Electron app (Windows)
      if: matrix.os == 'windows-latest'
      run: npm run make:win
      
    - name: Build Electron app (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        # Clean up any existing DMG volumes first
        hdiutil detach /Volumes/FowCrawler 2>/dev/null || true
        # Use the new make:darwin command with cleanup
        npm run make:darwin
      continue-on-error: true
      id: macos-build
      
    - name: Build Electron app (macOS) - Fallback without DMG
      if: matrix.os == 'macos-latest' && steps.macos-build.outcome == 'failure'
      run: |
        echo "Regular macOS build failed, trying without DMG maker..."
        npx electron-forge make --config=forge.config.no-dmg.js
      
    # Debug build outputs
    - name: Debug Windows build output
      if: matrix.os == 'windows-latest'
      shell: pwsh
      run: |
        Write-Host "=== Windows build output structure ==="
        if (Test-Path "out") {
          Get-ChildItem -Path "out" -Recurse -Include "*.exe", "*.zip", "*.nupkg" | Select-Object FullName | Sort-Object FullName
          Write-Host ""
          Write-Host "=== out directory ==="
          Get-ChildItem -Path "out" -Force
          Write-Host ""
          if (Test-Path "out/make") {
            Write-Host "=== make directory ==="
            Get-ChildItem -Path "out/make" -Force -Recurse
          } else {
            Write-Host "No make directory"
          }
        } else {
          Write-Host "No out directory found"
        }
        
    - name: Debug macOS build output
      if: matrix.os == 'macos-latest'
      run: |
        echo "=== macOS build output structure ==="
        find out -type f -name "*.zip" -o -name "*.dmg" -o -name "*.app" | sort || echo "No macOS build outputs found"
        ls -la out/ || echo "No out directory"
        ls -la out/make/ || echo "No make directory"
        ls -la out/make/zip/ || echo "No zip directory"
        ls -la out/make/zip/darwin/ || echo "No darwin directory"
      
    # Upload Windows artifacts
    - name: Upload Windows artifacts
      if: matrix.os == 'windows-latest'
      uses: actions/upload-artifact@v4
      with:
        name: FowCrawler-Windows-${{ steps.package-version.outputs.version }}
        path: |
          out/make/squirrel.windows/x64/*.exe
          out/make/squirrel.windows/x64/*.nupkg
          out/make/zip/win32/x64/*.zip
        retention-days: 30
        
    # Upload macOS artifacts with more flexible paths
    - name: Upload macOS artifacts
      if: matrix.os == 'macos-latest'
      uses: actions/upload-artifact@v4
      with:
        name: FowCrawler-macOS-${{ steps.package-version.outputs.version }}
        path: |
          out/make/zip/darwin/**/*.zip
          out/make/*.dmg
          out/make/**/*.zip
        retention-days: 30

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v') || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Get version from package.json
      id: package-version
      run: |
        VERSION=$(node -p "require('./package.json').version")
        echo "version=v${VERSION}" >> $GITHUB_OUTPUT
        echo "Version: v${VERSION}"
      
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
        
    - name: Display structure of downloaded files
      run: |
        echo "=== Artifacts directory structure ==="
        find artifacts -type f -name "*.exe" -o -name "*.zip" -o -name "*.nupkg" -o -name "*.dmg" 2>/dev/null | sort || echo "No build artifacts found"
        echo ""
        echo "=== Detailed file listing ==="
        ls -la artifacts/ 2>/dev/null || echo "No artifacts directory"
        echo ""
        for dir in artifacts/*/; do
          if [ -d "$dir" ]; then
            echo "=== Contents of $dir ==="
            ls -la "$dir" 2>/dev/null || echo "Directory empty or inaccessible"
            echo ""
          fi
        done
        
    - name: Find and prepare release files
      id: prepare-files
      run: |
        echo "Looking for release files..."
        
        # Find Windows files
        ARTIFACT_DIR_WIN="artifacts/FowCrawler-Windows-${{ steps.package-version.outputs.version }}"
        SETUP_EXE=$(find "${ARTIFACT_DIR_WIN}" -name "*Setup*.exe" -o -name "*setup*.exe" -o -name "*.exe" 2>/dev/null | head -1)
        WIN_ZIP=$(find "${ARTIFACT_DIR_WIN}" -name "*.zip" 2>/dev/null | head -1)
        
        # Find macOS files
        ARTIFACT_DIR_MAC="artifacts/FowCrawler-macOS-${{ steps.package-version.outputs.version }}"
        MACOS_ZIP=$(find "${ARTIFACT_DIR_MAC}" -name "*.zip" 2>/dev/null | head -1)
        if [ -z "$MACOS_ZIP" ]; then
          MACOS_ZIP=$(find artifacts -name "*darwin*.zip" -o -name "*macOS*.zip" -o -name "*mac*.zip" 2>/dev/null | head -1)
        fi
        MACOS_DMG=$(find "${ARTIFACT_DIR_MAC}" -name "*.dmg" 2>/dev/null | head -1)
        if [ -z "$MACOS_DMG" ]; then
          MACOS_DMG=$(find artifacts -name "*.dmg" 2>/dev/null | head -1)
        fi
        
        # Output findings
        echo "setup_exe=${SETUP_EXE}" >> $GITHUB_OUTPUT
        echo "win_zip=${WIN_ZIP}" >> $GITHUB_OUTPUT
        echo "macos_zip=${MACOS_ZIP}" >> $GITHUB_OUTPUT
        echo "macos_dmg=${MACOS_DMG}" >> $GITHUB_OUTPUT
        
        echo "Found Windows setup: ${SETUP_EXE}"
        echo "Found Windows zip: ${WIN_ZIP}"
        echo "Found macOS zip: ${MACOS_ZIP}"
        echo "Found macOS dmg: ${MACOS_DMG}"
        
        # Prepare release files list
        RELEASE_FILES=""
        if [ -n "$SETUP_EXE" ]; then
          cp "$SETUP_EXE" "FowCrawler-Windows-${{ steps.package-version.outputs.version }}-Setup.exe"
          RELEASE_FILES="$RELEASE_FILES FowCrawler-Windows-${{ steps.package-version.outputs.version }}-Setup.exe"
        fi
        if [ -n "$WIN_ZIP" ]; then
          cp "$WIN_ZIP" "FowCrawler-Windows-${{ steps.package-version.outputs.version }}.zip"
          RELEASE_FILES="$RELEASE_FILES FowCrawler-Windows-${{ steps.package-version.outputs.version }}.zip"
        fi
        if [ -n "$MACOS_ZIP" ]; then
          cp "$MACOS_ZIP" "FowCrawler-macOS-${{ steps.package-version.outputs.version }}.zip"
          RELEASE_FILES="$RELEASE_FILES FowCrawler-macOS-${{ steps.package-version.outputs.version }}.zip"
        fi
        if [ -n "$MACOS_DMG" ]; then
          cp "$MACOS_DMG" "FowCrawler-macOS-${{ steps.package-version.outputs.version }}.dmg"
          RELEASE_FILES="$RELEASE_FILES FowCrawler-macOS-${{ steps.package-version.outputs.version }}.dmg"
        fi
        
        echo "release_files=${RELEASE_FILES}" >> $GITHUB_OUTPUT
        echo "Release files prepared: ${RELEASE_FILES}"
        
    - name: Create Release with GitHub CLI
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        TAG_NAME="${{ github.event.inputs.version || github.ref_name }}"
        RELEASE_TITLE="FowCrawler ${TAG_NAME}"
        
        # Create release notes
        cat > release_notes.md << 'EOF'
        ## FowCrawler Release ${{ github.event.inputs.version || github.ref_name }}
        
        ### Downloads
        - **Windows**: Download `FowCrawler-Setup.exe` for easy installation
        - **macOS**: Download the `.zip` file and extract
        
        ### ðŸ“‹ Installation Guides
        - **Windows Users**: See [Windows Installation Guide](https://github.com/${{ github.repository }}/blob/main/WINDOWS_INSTALL_GUIDE.md)
        - **macOS Users**: See [macOS Installation Guide](https://github.com/${{ github.repository }}/blob/main/MACOS_INSTALL_GUIDE.md)
        
        ### ðŸš¨ Common Issues & Solutions
        
        **macOS "App is damaged" error**: 
        - Right-click the app â†’ "Open" â†’ "Open" in security dialog
        - See full guide: [macOS Installation Guide](https://github.com/${{ github.repository }}/blob/main/MACOS_INSTALL_GUIDE.md)
        
        **Windows blank screen/nothing shows**: 
        - Install Python 3.8+ from python.org
        - Dependencies are now included automatically!
        - See full guide: [Windows Installation Guide](https://github.com/${{ github.repository }}/blob/main/WINDOWS_INSTALL_GUIDE.md)
        
        ### Features
        - League of Legends player ranking search
        - Filter by winrate and rank range
        - Export results to CSV
        - Real-time progress tracking
        - Automatic Python API integration
        
        ### System Requirements
        - **Windows**: Windows 10 or later + Python 3.8+
        - **macOS**: macOS 10.15 or later + Python 3.8+
        - **Memory**: 4GB RAM minimum
        - **Storage**: 500MB-1GB free space
        
        ### First Time Setup
        1. **Install Python** 3.8+ from [python.org](https://www.python.org/downloads/)
        2. **Dependencies included** - No manual package installation needed!
        3. **Follow platform-specific installation guide** (links above)
        4. **Launch the app** - first startup may take 30-60 seconds
        
        ### ðŸ”’ Security Note
        This app is not code-signed (requires $99/year Apple Developer certificate). Security warnings are normal and can be safely bypassed using the installation guides above.
        
        For detailed instructions and troubleshooting, see the installation guides linked above.
        EOF
        
        # Create the release
        echo "Creating release ${TAG_NAME}..."
        RELEASE_FILES="${{ steps.prepare-files.outputs.release_files }}"
        
        if [ -n "$RELEASE_FILES" ]; then
          gh release create "${TAG_NAME}" \
            --title "${RELEASE_TITLE}" \
            --notes-file release_notes.md \
            --draft=false \
            --prerelease=false \
            $RELEASE_FILES
        else
          echo "No release files found, creating release without assets"
          gh release create "${TAG_NAME}" \
            --title "${RELEASE_TITLE}" \
            --notes-file release_notes.md \
            --draft=false \
            --prerelease=false
        fi
        
        echo "Release created successfully!" 